#!/usr/bin/env python3

"""
Run `julia` with `JULIA_NUM_THREADS=<number of physical cores>`.

Use `julia-t` in place of `julia` to run `julia` with appropriate
`$JULIA_NUM_THREADS`.  Arguments are passed to `julia` as-is except
for `--julia` option that controls the actual `julia` binary to be
used.
"""

# Copyright (c) 2020 Takafumi Arakaki <aka.tkf@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import os
from subprocess import check_output


def default_julia():
    if __file__.endswith("-t"):
        return os.path.basename(__file__)[: -len("-t")]
    return "julia"


def physical_cores():
    csv = check_output(["lscpu", "--parse"], universal_newlines=True)
    # Columns: CPU,Core,Socket,Node,,L1d,L1i,L2,L3
    rows = [line.split(",") for line in csv.splitlines() if not line.startswith("#")]
    return len({r[1] for r in rows})


def julia_t(julia, args):
    if "JULIA_NUM_THREADS" not in os.environ:
        os.environ["JULIA_NUM_THREADS"] = str(physical_cores())
    cmd = [julia] + list(args)
    os.execvp(cmd[0], cmd)


def main(args=None):
    parser = argparse.ArgumentParser(
        usage="%(prog)s [-h] [--julia JULIA] [args...]",
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "--julia",
        default=default_julia(),
        help="""
        Julia binary to be used.  Default value is the file name of
        this script without the suffix `-t`.  If this script is called
        `julia1.3-t`, the executable named `julia1.3` is used.  Use
        symlinks for using `julia-t` with different `julia` versions;
        e.g., `ln -s julia-t julia1.3-t`.
        (default: %(default)s)
        """,
    )
    ns, args = parser.parse_known_args(args)
    ns.args = args
    julia_t(**vars(ns))


if __name__ == "__main__":
    main()
